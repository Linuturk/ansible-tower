heat_template_version: 2014-10-16

description: |
  Single Linux server running the free, 10 node version of
  [Tower](http://www.ansible.com/tower).  This deployment is intended for
  development and test cases.

parameter_groups:

- label: Server Settings
  parameters:
  - flavor
  - image

- label: rax-dev-params
  # These are parameters that will not be displayed in the portal. The purpose
  # of these parameters is for users who are developing or testing newer or
  # different setups. If any of these parameters are changed, there is a good
  # chance this stack will fail to properly deploy.
  parameters:
  - ansible_tower_tarball
  - server_name

parameters:

  flavor:
    label: Server Size
    description: |
      The size is based on the amount of RAM for the provisioned server.
    type: string
    default: 2 GB General Purpose v1
    constraints:
      - allowed_values:
        - 2 GB General Purpose v1
        - 4 GB General Purpose v1
        - 8 GB General Purpose v1
        - 15 GB I/O v1
        - 30 GB I/O v1
        - 2GB Standard Instance
        - 4GB Standard Instance
        - 8GB Standard Instance
        - 15GB Standard Instance
        - 30GB Standard Instance
        description: must be a valid Nova Cloud Server flavor.

  image:
    label: Operating System
    description: |
      Server image used for all servers that are created as a part of this
      deployment
    type: string
    default: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM) (Orchestration)
    constraints:
    - allowed_values:
      - Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM) (Orchestration)
      description: Must be a supported operating system.

  server_name:
    label: Server Hostname
    description: The instance name
    type: string
    default: ansible-tower

  ansible_tower_tarball:
    label: Ansible Tarball
    description: Location of the Ansible Tower installer
    type: string
    default: |
      https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-latest.el7.tar.gz

resources:

  ssh_key:
    type: "OS::Nova::KeyPair"
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true

  # Random password generation
  ansible_admin_pass:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  postgres_admin_pass:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  redis_admin_pass:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  munin_admin_pass:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  rabbitmq_admin_pass:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  upload_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            apt-get -y install software-properties-common
            apt-add-repository -y ppa:ansible/ansible
            apt-get -y update
            apt-get install -y python-dev python-yaml python-jinja2 python-pip selinux-utils
            # apt-get install -y libkrb5-dev krb5-user pywinrm[kerberos]

            pip install --upgrade pip

            pip install paramiko "pywinrm>=0.2.2" "ansible>=2.3.0"

            cat > /root/inventory <<'EOF'
              [tower]
              localhost ansible_connection=local

              [all:vars]
              admin_password='%ansible_admin_pass%'
              redis_password='%redis_admin_pass%'

              pg_host=''
              pg_port=''

              pg_database='awx'
              pg_username='awx'
              pg_password='%postgres_admin_pass%'

              rabbitmq_port=5672
              rabbitmq_vhost=tower
              rabbitmq_username=tower
              rabbitmq_password='%rabbitmq_admin_pass%'
              rabbitmq_cookie=rabbitmqcookie
              # Set to true for fqdns and ip addresses, False if you are using localhost
              rabbitmq_use_long_name=false
            EOF

            cat > /root/tower_install.sh <<'EOF'
              #!/bin/bash -v
              set -e
              # pip install ansible
              # Pull and extract the installer
              cd /root
              ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
              cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
              wget -ct0 %ansible_tower_tarball%
              tar xzf ansible-tower-setup-bundle-latest.el7.tar.gz

              # Get the extracted folder name
              ANSIBLE_SETUP_FOLDER=`tar tf ansible-tower-setup-bundle-latest.el7.tar.gz | awk -F/ '{ print $1 }' | uniq`
              # Copy everything to working directory and install
              cp inventory $ANSIBLE_SETUP_FOLDER/inventory
              cd $ANSIBLE_SETUP_FOLDER
              sudo ./setup.sh
              ufw allow 443
            EOF

            chmod +x /root/tower_install.sh
            /root/tower_install.sh
          params:
            "%ansible_tower_tarball%": { get_param: ansible_tower_tarball }
            "%ansible_admin_pass%": { get_attr: [ansible_admin_pass, value] }
            "%postgres_admin_pass%": { get_attr: [postgres_admin_pass, value] }
            "%redis_admin_pass%": { get_attr: [redis_admin_pass, value] }
            "%rabbitmq_admin_pass%": {get_attr: [rabbitmq_admin_pass, value]}
            "%munin_admin_pass%": { get_attr: [munin_admin_pass, value] }
            "%server_name%": { get_param: server_name }

  deploy_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: upload_role_config
      server:
        get_resource: ansible_tower

  ansible_tower:
    type: "OS::Nova::Server"
    properties:
      key_name: { get_resource: ssh_key }
      flavor: { get_param: flavor }
      image: { get_param: image }
      name: { get_param: server_name }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      config_drive: "true"
      user_data_format: SOFTWARE_CONFIG

outputs:
  private_key:
    description: SSH Private Key
    value: { get_attr: [ssh_key, private_key] }

  ansible_url:
    value:
      str_replace:
        template: "https://%server_ip%"
        params:
          "%server_ip%": { get_attr: [ ansible_tower, accessIPv4 ] }
    description: Tower URL

  server_ip:
    value: { get_attr: [ ansible_tower, accessIPv4 ] }
    description: Server IP

  ansible_username:
    value: admin
    description: Admin Username

  ansible_password:
    value: { get_attr: [ansible_admin_pass, value] }
    description: Admin Password
